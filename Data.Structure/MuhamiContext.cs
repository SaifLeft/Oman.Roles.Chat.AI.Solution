// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Data.Structure;

public partial class MuhamiContext : DbContext
{
    public MuhamiContext(DbContextOptions<MuhamiContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AnalyticsQueryLog> AnalyticsQueryLogs { get; set; }

    public virtual DbSet<AnalyticsRevenueLog> AnalyticsRevenueLogs { get; set; }

    public virtual DbSet<ChatMessage> ChatMessages { get; set; }

    public virtual DbSet<ChatRoom> ChatRooms { get; set; }

    public virtual DbSet<ChatRoomFolder> ChatRoomFolders { get; set; }

    public virtual DbSet<ChatRule> ChatRules { get; set; }

    public virtual DbSet<ConversationKeyword> ConversationKeywords { get; set; }

    public virtual DbSet<ConversationPdfReference> ConversationPdfReferences { get; set; }

    public virtual DbSet<ConversationTracking> ConversationTrackings { get; set; }

    public virtual DbSet<CouponPlan> CouponPlans { get; set; }

    public virtual DbSet<DataSourceFile> DataSourceFiles { get; set; }

    public virtual DbSet<DataSourceFileKeyword> DataSourceFileKeywords { get; set; }

    public virtual DbSet<DiscountCoupon> DiscountCoupons { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<LegalCategory> LegalCategories { get; set; }

    public virtual DbSet<LegalContextKeyword> LegalContextKeywords { get; set; }

    public virtual DbSet<LegalContextTopic> LegalContextTopics { get; set; }

    public virtual DbSet<MessageCategory> MessageCategories { get; set; }

    public virtual DbSet<PlanFeature> PlanFeatures { get; set; }

    public virtual DbSet<RefreshToken> RefreshTokens { get; set; }

    public virtual DbSet<SmsOtpCode> SmsOtpCodes { get; set; }

    public virtual DbSet<SubscriptionPlan> SubscriptionPlans { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserActivityLog> UserActivityLogs { get; set; }

    public virtual DbSet<UserSubscription> UserSubscriptions { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AnalyticsQueryLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("analytics_query_log_pkey");

            entity.ToTable("analytics_query_log");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.QueryDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("query_date");
            entity.Property(e => e.QueryText)
                .IsRequired()
                .HasColumnName("query_text");
            entity.Property(e => e.SessionId)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("session_id");
            entity.Property(e => e.Topic)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("topic");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.AnalyticsQueryLogs)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkanalytics_971959");
        });

        modelBuilder.Entity<AnalyticsRevenueLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("analytics_revenue_log_pkey");

            entity.ToTable("analytics_revenue_log");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(19, 3)
                .HasColumnName("amount");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("payment_method");
            entity.Property(e => e.PlanId).HasColumnName("plan_id");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.SubscriptionId).HasColumnName("subscription_id");
            entity.Property(e => e.TransactionDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("transaction_date");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(100)
                .HasColumnName("transaction_id");

            entity.HasOne(d => d.Plan).WithMany(p => p.AnalyticsRevenueLogs)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkanalytics_10887");

            entity.HasOne(d => d.Subscription).WithMany(p => p.AnalyticsRevenueLogs)
                .HasForeignKey(d => d.SubscriptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkanalytics_460518");
        });

        modelBuilder.Entity<ChatMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("chat_message_pkey");

            entity.ToTable("chat_message");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChatRoomId).HasColumnName("chat_room_id");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasColumnName("content");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.EmotionalTone)
                .HasMaxLength(50)
                .HasColumnName("emotional_tone");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.Role)
                .IsRequired()
                .HasComment("user or system")
                .HasColumnName("role");
            entity.Property(e => e.SenderId)
                .IsRequired()
                .HasColumnName("sender_id");
            entity.Property(e => e.SentimentScore).HasColumnName("sentiment_score");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("timestamp");
            entity.Property(e => e.Urgency).HasColumnName("urgency");

            entity.HasOne(d => d.ChatRoom).WithMany(p => p.ChatMessages)
                .HasForeignKey(d => d.ChatRoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkchat_messa194675");
        });

        modelBuilder.Entity<ChatRoom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("chat_room_pkey");

            entity.ToTable("chat_room");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.FolderPath).HasColumnName("folder_path");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.IsFavorite)
                .HasDefaultValue(false)
                .HasColumnName("is_favorite");
            entity.Property(e => e.LastActivityAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_activity_at");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'Active'::text")
                .HasColumnName("status");
            entity.Property(e => e.Tags).HasColumnName("tags");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasColumnName("title");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.ChatRooms)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkchat_room727201");
        });

        modelBuilder.Entity<ChatRoomFolder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("chat_room_folder_pkey");

            entity.ToTable("chat_room_folder");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.ParentFolderId).HasColumnName("parent_folder_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.ParentFolder).WithMany(p => p.InverseParentFolder)
                .HasForeignKey(d => d.ParentFolderId)
                .HasConstraintName("fkchat_room_760188");

            entity.HasOne(d => d.User).WithMany(p => p.ChatRoomFolders)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkchat_room_802826");
        });

        modelBuilder.Entity<ChatRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("chat_rule_pkey");

            entity.ToTable("chat_rule");

            entity.HasIndex(e => e.Text, "chat_rule_text_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.IsDefault)
                .HasDefaultValue(false)
                .HasColumnName("is_default");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.Language)
                .IsRequired()
                .HasDefaultValueSql("'ar'::text")
                .HasColumnName("language");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Text)
                .IsRequired()
                .HasColumnName("text");
        });

        modelBuilder.Entity<ConversationKeyword>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("conversation_keyword_pkey");

            entity.ToTable("conversation_keyword");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ConversationId).HasColumnName("conversation_id");
            entity.Property(e => e.Count)
                .HasDefaultValue(1L)
                .HasColumnName("count");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.Keyword)
                .IsRequired()
                .HasColumnName("keyword");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");

            entity.HasOne(d => d.Conversation).WithMany(p => p.ConversationKeywords)
                .HasForeignKey(d => d.ConversationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkconversati216598");
        });

        modelBuilder.Entity<ConversationPdfReference>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("conversation_pdf_reference_pkey");

            entity.ToTable("conversation_pdf_reference");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ConversationId).HasColumnName("conversation_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.FileId).HasColumnName("file_id");
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasColumnName("file_name");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.RelevanceScore)
                .HasDefaultValue(0L)
                .HasColumnName("relevance_score");

            entity.HasOne(d => d.Conversation).WithMany(p => p.ConversationPdfReferences)
                .HasForeignKey(d => d.ConversationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkconversati876832");

            entity.HasOne(d => d.File).WithMany(p => p.ConversationPdfReferences)
                .HasForeignKey(d => d.FileId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkconversati495653");
        });

        modelBuilder.Entity<ConversationTracking>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("conversation_tracking_pkey");

            entity.ToTable("conversation_tracking");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AiResponse)
                .IsRequired()
                .HasColumnName("ai_response");
            entity.Property(e => e.ConversationId)
                .IsRequired()
                .HasColumnName("conversation_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.Language)
                .IsRequired()
                .HasDefaultValueSql("'AR'::text")
                .HasColumnName("language");
            entity.Property(e => e.MetadataJson)
                .IsRequired()
                .HasColumnName("metadata_json");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.RoomId).HasColumnName("room_id");
            entity.Property(e => e.Timestamp)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("timestamp");
            entity.Property(e => e.Topic)
                .IsRequired()
                .HasDefaultValueSql("'GENERAL'::text")
                .HasColumnName("topic");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UserQuery)
                .IsRequired()
                .HasColumnName("user_query");

            entity.HasOne(d => d.Room).WithMany(p => p.ConversationTrackings)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkconversati300556");

            entity.HasOne(d => d.User).WithMany(p => p.ConversationTrackings)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkconversati28274");
        });

        modelBuilder.Entity<CouponPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("coupon_plan_pkey");

            entity.ToTable("coupon_plan");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CouponId).HasColumnName("coupon_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.PlanId).HasColumnName("plan_id");

            entity.HasOne(d => d.Coupon).WithMany(p => p.CouponPlans)
                .HasForeignKey(d => d.CouponId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkcoupon_pla739811");

            entity.HasOne(d => d.Plan).WithMany(p => p.CouponPlans)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkcoupon_pla246807");
        });

        modelBuilder.Entity<DataSourceFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("data_source_file_pkey");

            entity.ToTable("data_source_file");

            entity.HasIndex(e => e.FileName, "data_source_file_file_name_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasColumnName("content");
            entity.Property(e => e.ContentType)
                .IsRequired()
                .HasColumnName("content_type");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasColumnName("file_name");
            entity.Property(e => e.FilePath)
                .IsRequired()
                .HasColumnName("file_path");
            entity.Property(e => e.FileType)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("file_type");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.IsKnowledgeBase).HasColumnName("is_knowledge_base");
            entity.Property(e => e.IsPublic).HasColumnName("is_public");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.PageCount).HasColumnName("page_count");
            entity.Property(e => e.Size)
                .HasComment("bytes")
                .HasColumnName("SIZE");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasColumnName("title");
            entity.Property(e => e.UploadedBy).HasColumnName("uploaded_by");

            entity.HasOne(d => d.UploadedByNavigation).WithMany(p => p.DataSourceFiles)
                .HasForeignKey(d => d.UploadedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkdata_sourc532069");
        });

        modelBuilder.Entity<DataSourceFileKeyword>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("data_source_file_keyword_pkey");

            entity.ToTable("data_source_file_keyword");

            entity.HasIndex(e => e.Id, "data_source_file_keyword_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.FileId).HasColumnName("file_id");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.Keyword)
                .IsRequired()
                .HasColumnName("keyword");

            entity.HasOne(d => d.File).WithMany(p => p.DataSourceFileKeywords)
                .HasForeignKey(d => d.FileId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkdata_sourc741243");
        });

        modelBuilder.Entity<DiscountCoupon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("discount_coupon_pkey");

            entity.ToTable("discount_coupon");

            entity.HasIndex(e => e.Code, "discount_coupon_code_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.CurrentUses)
                .HasDefaultValue(0L)
                .HasColumnName("current_uses");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.DiscountType)
                .IsRequired()
                .HasComment("Percentage, Fixed")
                .HasColumnName("discount_type");
            entity.Property(e => e.DiscountValue).HasColumnName("discount_value");
            entity.Property(e => e.EndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.MaxUses).HasColumnName("max_uses");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("invoice_pkey");

            entity.ToTable("invoice");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.CouponCode).HasColumnName("coupon_code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.DiscountAmount).HasColumnName("discount_amount");
            entity.Property(e => e.InvoiceNumber)
                .IsRequired()
                .HasColumnName("invoice_number");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.Notes).HasColumnName("notes");
            entity.Property(e => e.PaymentGatewayTransactionId).HasColumnName("payment_gateway_transaction_id");
            entity.Property(e => e.PaymentMethod).HasColumnName("payment_method");
            entity.Property(e => e.PlanId).HasColumnName("plan_id");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasComment("Pending, Completed, Failed, Cancelled, Refunded")
                .HasColumnName("status");
            entity.Property(e => e.TotalAmount).HasColumnName("total_amount");
            entity.Property(e => e.TransactionDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("transaction_date");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasComment("NewSubscription, Renewal, Upgrade, Downgrade, Refund")
                .HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkinvoice289617");
        });

        modelBuilder.Entity<LegalCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("legal_category_pkey");

            entity.ToTable("legal_category", tb => tb.HasComment("جدول لفئات الاستعلامات القانونية"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnName("description");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
        });

        modelBuilder.Entity<LegalContextKeyword>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("legal_context_keyword_pkey");

            entity.ToTable("legal_context_keyword");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.Keyword)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("keyword");
            entity.Property(e => e.Language)
                .IsRequired()
                .HasMaxLength(5)
                .HasDefaultValueSql("'AR'::character varying")
                .HasColumnName("language");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.TopicId).HasColumnName("topic_id");

            entity.HasOne(d => d.Topic).WithMany(p => p.LegalContextKeywords)
                .HasForeignKey(d => d.TopicId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fklegal_cont537269");
        });

        modelBuilder.Entity<LegalContextTopic>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("legal_context_topic_pkey");

            entity.ToTable("legal_context_topic");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnName("description");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.NameEn)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name_en");
        });

        modelBuilder.Entity<MessageCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("message_category_pkey");

            entity.ToTable("message_category");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Confidence)
                .HasPrecision(19)
                .HasColumnName("confidence");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.IsAutoClassified)
                .HasDefaultValue(false)
                .HasColumnName("is_auto_classified");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.LegalCategoryId).HasColumnName("legal_category_id");
            entity.Property(e => e.MessageId).HasColumnName("message_id");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");

            entity.HasOne(d => d.LegalCategory).WithMany(p => p.MessageCategories)
                .HasForeignKey(d => d.LegalCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkmessage_ca762713");

            entity.HasOne(d => d.Message).WithMany(p => p.MessageCategories)
                .HasForeignKey(d => d.MessageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkmessage_ca37445");
        });

        modelBuilder.Entity<PlanFeature>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("plan_feature_pkey");

            entity.ToTable("plan_feature");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.Feature)
                .IsRequired()
                .HasColumnName("feature");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.PlanId).HasColumnName("plan_id");

            entity.HasOne(d => d.Plan).WithMany(p => p.PlanFeatures)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkplan_featu719064");
        });

        modelBuilder.Entity<RefreshToken>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("refresh_token_pkey");

            entity.ToTable("refresh_token");

            entity.HasIndex(e => e.Token, "refresh_token_token_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.ExpiresAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("expires_at");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.RevokedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("revoked_at");
            entity.Property(e => e.Token)
                .IsRequired()
                .HasColumnName("token");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.RefreshTokens)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkrefresh_to131031");
        });

        modelBuilder.Entity<SmsOtpCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sms_otp_code_pkey");

            entity.ToTable("sms_otp_code");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.ExpirationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("expiration_time");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.IsUsed).HasColumnName("is_used");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.PhoneNumber).HasColumnName("phone_number");
        });

        modelBuilder.Entity<SubscriptionPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("subscription_plan_pkey");

            entity.ToTable("subscription_plan");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AllowedChatRooms)
                .HasDefaultValue(5L)
                .HasColumnName("allowed_chat_rooms");
            entity.Property(e => e.AllowedFileSizeMb)
                .HasDefaultValue(50L)
                .HasColumnName("allowed_file_size_mb");
            entity.Property(e => e.AllowedFiles)
                .HasDefaultValue(10L)
                .HasColumnName("allowed_files");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.IsTrial)
                .HasDefaultValue(false)
                .HasColumnName("is_trial");
            entity.Property(e => e.MaxQueriesPerDay)
                .HasDefaultValue(50L)
                .HasColumnName("max_queries_per_day");
            entity.Property(e => e.MaxQueriesPerMonth)
                .HasDefaultValue(1000L)
                .HasColumnName("max_queries_per_month");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasColumnName("name");
            entity.Property(e => e.PriceMonthly).HasColumnName("price_monthly");
            entity.Property(e => e.PriceYearly).HasColumnName("price_yearly");
            entity.Property(e => e.TrialDays).HasColumnName("trial_days");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("USER_pkey");

            entity.ToTable("USER");

            entity.HasIndex(e => e.Email, "USER_email_key").IsUnique();

            entity.HasIndex(e => e.Username, "USER_username_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasColumnName("first_name");
            entity.Property(e => e.GoogleEmail)
                .HasMaxLength(255)
                .HasColumnName("google_email");
            entity.Property(e => e.GoogleId).HasColumnName("google_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.IsEmailConfirmed)
                .HasDefaultValue(false)
                .HasColumnName("is_email_confirmed");
            entity.Property(e => e.LastLoginAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_login_at");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasColumnName("last_name");
            entity.Property(e => e.LogInType).HasColumnName("log_in_type");
            entity.Property(e => e.MiddleName).HasColumnName("middle_name");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasColumnName("password_hash");
            entity.Property(e => e.PhoneNumber).HasColumnName("phone_number");
            entity.Property(e => e.PhoneVerified)
                .HasDefaultValue(false)
                .HasColumnName("phone_verified");
            entity.Property(e => e.UserAgent)
                .HasMaxLength(500)
                .HasColumnName("user_agent");
            entity.Property(e => e.UserRole)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("'User'::character varying")
                .HasComment("User, Admin")
                .HasColumnName("user_role");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("username");
        });

        modelBuilder.Entity<UserActivityLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("user_activity_log_pkey");

            entity.ToTable("user_activity_log");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActivityType)
                .IsRequired()
                .HasComment("Login, Logout, CreateChatRoom, SendMessage, etc.")
                .HasColumnName("activity_type");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.IpAddress).HasColumnName("ip_address");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("timestamp");
            entity.Property(e => e.UserAgent).HasColumnName("user_agent");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.UserActivityLogs)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkuser_activ688037");
        });

        modelBuilder.Entity<UserSubscription>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("user_subscription_pkey");

            entity.ToTable("user_subscription");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AutoRenew)
                .HasDefaultValue(false)
                .HasColumnName("auto_renew");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatedByUserId).HasColumnName("created_by_user_id");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.EndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("is_deleted");
            entity.Property(e => e.LastInvoiceId).HasColumnName("last_invoice_id");
            entity.Property(e => e.LastQueryDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_query_date");
            entity.Property(e => e.LastRenewalDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_renewal_date");
            entity.Property(e => e.ModifiedByUserId).HasColumnName("modified_by_user_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_date");
            entity.Property(e => e.Notes).HasColumnName("notes");
            entity.Property(e => e.PaymentGatewayTransactionId)
                .HasMaxLength(100)
                .HasColumnName("payment_gateway_transaction_id");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(50)
                .HasColumnName("payment_method");
            entity.Property(e => e.PeriodType)
                .IsRequired()
                .HasComment("Monthly, Yearly, For Ever")
                .HasColumnName("period_type");
            entity.Property(e => e.PlanId).HasColumnName("plan_id");
            entity.Property(e => e.QueriesUsedThisMonth)
                .HasDefaultValue(0L)
                .HasColumnName("queries_used_this_month");
            entity.Property(e => e.QueriesUsedToday)
                .HasDefaultValue(0L)
                .HasColumnName("queries_used_today");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasComment("Active, Trial, Expired, Cancelled, Suspended")
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Plan).WithMany(p => p.UserSubscriptions)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkuser_subsc808503");

            entity.HasOne(d => d.User).WithMany(p => p.UserSubscriptions)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkuser_subsc199738");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}